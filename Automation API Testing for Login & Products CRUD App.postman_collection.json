{
	"info": {
		"_postman_id": "222a41f0-2acb-428b-9d92-c41f3ff8144a",
		"name": "Automation API Testing for Login & Products CRUD App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9297796",
		"_collection_link": "https://www.postman.com/buihui/workspace/login-productscrud-apis/collection/9297796-222a41f0-2acb-428b-9d92-c41f3ff8144a?action=share&source=collection_link&creator=9297796"
	},
	"item": [
		{
			"name": "Login - Negative Test (Invalid Credentials)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(false);",
							"    pm.expect(jsonData.errorMessage).to.include(\"Username or password is incorrect\");",
							"});",
							"",
							"// Ensure token is not set",
							"pm.environment.unset(\"token\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{invalid_username}}\",\n    \"password\": \"{{invalid_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Positive Test (Valid Credentials)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Login successful and token received\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData).to.have.property(\"token\");",
							"    pm.environment.set(\"token\", jsonData.token);",
							"    console.log(\"Token saved:\", jsonData.token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Positive Test (New User)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Registration successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.title).to.eql('Registered Successfully.');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Negative Test (User Already Exists)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"User already exists error\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(false);",
							"    pm.expect(jsonData.errorMessage).to.include('Already Exist');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{existing_username}}\",\n  \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Negative Test (Missing Parameters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Missing parameter error\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(false);",
							"    pm.expect(jsonData.errorMessage).to.eql('Add proper parameter first!');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{existing_username}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Product - Positive Test (valid data)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response status true and success message\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.title).to.eql('Product added Successfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{product_name}}\",\n  \"desc\": \"{{product_desc}}\",\n  \"price\": {{product_price}},\n  \"discount\": {{product_discount}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/add-product",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"add-product"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Product - Negative Test (missing parameter)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Missing parameter error\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(false);",
							"    pm.expect(jsonData.errorMessage).to.eql('Add proper parameter first!');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{product_name}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/add-product",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"add-product"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Product Details - Positive Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response status is true and products array exists\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.products).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Response contains product with expected id\", () => {",
							"    const productId = pm.variables.get('product_id');",
							"    const products = pm.response.json().products;",
							"    const found = products.some(p => p.id == productId || p._id == productId);",
							"    pm.expect(found).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/get-product",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"get-product"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product - Positive Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response status true and update success message\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.title).to.eql('Product updated Successfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{product_name}}\",\n  \"desc\": \"{{product_desc}}\",\n  \"price\": {{product_price}},\n  \"discount\": {{product_discount}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/update-product/{{product_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"update-product",
						"{{product_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product - Negative Test (missing parameter)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Missing parameter error\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(false);",
							"    pm.expect(jsonData.errorMessage).to.eql('Add proper parameter first!');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{product_name}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/update-product/{{product_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"update-product",
						"{{product_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Positive Test - Delete Product Successfully",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response status true and delete success message\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.title).to.eql('Product deleted Successfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/delete-product/{{product_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"delete-product",
						"{{product_id}}"
					]
				}
			},
			"response": []
		}
	]
}